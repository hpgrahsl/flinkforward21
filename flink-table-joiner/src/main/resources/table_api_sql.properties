ddl.create.owner.table=CREATE TABLE dbz_mysql_owners (id INT, first_name STRING, last_name STRING, address STRING, city STRING, telephone STRING) WITH ('connector' = 'kafka', 'topic' = 'mysql1.petclinic.owners', 'properties.bootstrap.servers' = 'kafka:9092', 'properties.group.id' = 'somegrp1234', 'scan.startup.mode' = 'earliest-offset', 'format' = 'debezium-json')
ddl.create.pet.table=CREATE TABLE dbz_mysql_pets (id INT, name STRING, birth_date STRING, type_id INT, owner_id INT) WITH ('connector' = 'kafka', 'topic' = 'mysql1.petclinic.pets', 'properties.bootstrap.servers' = 'kafka:9092', 'properties.group.id' = 'somegrp1234', 'scan.startup.mode' = 'earliest-offset', 'format' = 'debezium-json')
ddl.create.owner-with-pets.table=CREATE TABLE flink_owner_with_pets (owner_id INT, owner ROW<id INT, first_name STRING, last_name STRING, address STRING, city STRING, telephone STRING>, pets ARRAY<ROW<id INT, name STRING, birth_date STRING, type_id INT, owner_id INT>>, PRIMARY KEY (owner_id) NOT ENFORCED) WITH ('connector' = 'upsert-kafka', 'topic' = 'flink_owner_with_pets', 'properties.bootstrap.servers' = 'kafka:9092', 'key.format' = 'json', 'value.format' = 'json', 'value.fields-include' = 'EXCEPT_KEY')
